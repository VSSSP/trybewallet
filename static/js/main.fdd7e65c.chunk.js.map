{"version":3,"sources":["images/wallet.png","types/index.js","actions/index.js","pages/Login.js","components/ExpensesTable.js","components/TableHeader.js","components/Table.js","components/OptionsTags.js","components/PayOptions.js","services/walletAPI.js","components/CurrenciesOptions.js","components/Form.js","components/SumExpensesValue.js","components/Header.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","types","LOGIN_INFO","WALLET_INFO","GET_WALLET_API_SUCCESS","GET_WALLET_API_FAILED","LOADING_API","GET_EXPENSES","DELETE_EXPENSE","EDIT_EXPENSE","SET_NEW_EXPENSE","LOAD_EDITED_EXPENSE","ERROR","payload","type","Login","state","email","senha","handleChange","bind","handleClick","target","name","value","this","setState","length","emailValidation","test","setLoginToStore","props","redirect","to","class","id","src","wallet","alt","placeholder","data-testid","onChange","className","disabled","enableButton","onClick","Component","connect","dispatch","ExpensesTable","handleEditButtonClick","expense","ask","exchangeRates","currency","parseFloat","toFixed","split","deleteExpenseFromStore","Number","editExpenseFromStore","expenses","map","key","description","tag","method","currencyName","convertedExpense","TableHeader","header","Table","OptionsTags","tags","PayOptions","payMethods","payMethod","fetchCurrencies","a","fetch","response","ok","Error","json","data","filter","Object","keys","currencie","message","CurrenciesOptions","getCurrencies","currencies","Form","handleEditExpenseButton","sendExpensesToStore","api","sendEditedExpenseToStore","selectedId","editing","htmlFor","editExpenseButton","addExpenseButton","SumExpensesValue","reduce","acc","curr","sumExpenses","Header","getUserFromStore","user","Wallet","React","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","password","loginReducer","action","error","walletReducer","current","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,oC,4NCa5BC,EAbD,CACZC,WAAY,aACZC,YAAa,cACbC,uBAAwB,yBACxBC,sBAAuB,wBACvBC,YAAa,cACbC,aAAc,eACdC,eAAgB,iBAChBC,aAAc,eACdC,gBAAiB,kBACjBC,oBAAqB,uBCPrBP,EAOoBH,EAPpBG,uBACAC,EAMoBJ,EANpBI,sBACAE,EAKoBN,EALpBM,aACAL,EAIoBD,EAJpBC,WAEAM,EAEoBP,EAFpBO,eACAC,EACoBR,EADpBQ,aACAC,EAAoBT,EAApBS,gBAiBWE,EAAQ,SAACC,GAAD,MAAc,CACjCC,KAAMT,EACNQ,Y,iBCtBIE,E,kDACJ,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,MAAO,GACPC,MAAO,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBARP,E,4DAW6B,IAAD,IAA3BE,OAAUC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAC7BC,KAAKC,SAAL,eACGH,EAAOC,M,qCAOV,OAFkBC,KAAKT,MAAfE,MAEES,OADS,IAEdF,KAAKG,oB,wCAIO,IACTX,EAAUQ,KAAKT,MAAfC,MAIR,MAHmB,6CAGDY,KAAKZ,K,qCAKvBa,EAD4BL,KAAKM,MAAzBD,iBACQL,KAAKT,OACrBS,KAAKC,SAAS,CACZM,UAAU,M,+BAIJ,IAAD,EAC4BP,KAAKT,MAAhCC,EADD,EACCA,MAAOC,EADR,EACQA,MACf,OAFO,EACec,SACD,kBAAC,IAAD,CAAUC,GAAG,cAEhC,yBAAKC,MAAM,sBACT,yBAAKC,GAAG,eAEN,yBAAKD,MAAM,gBACT,yBAAKE,IAAMC,IAASF,GAAG,OAAOG,IAAI,eAGpC,8BACA,2BACExB,KAAK,QACLS,KAAK,QACLC,MAAQP,EACRsB,YAAY,SACZC,cAAY,cACZC,SAAWhB,KAAKN,aAChBuB,UAAU,8BAEZ,2BACE5B,KAAK,WACLS,KAAK,QACLC,MAAQN,EACRqB,YAAY,QACZC,cAAY,iBACZC,SAAWhB,KAAKN,aAChBuB,UAAU,6BAEZ,4BACEC,SAAWlB,KAAKmB,eAChB9B,KAAK,SACL+B,QAAUpB,KAAKJ,YACfqB,UAAU,8BAJZ,iB,GAxEUI,aA4FLC,cAAQ,MAJI,SAACC,GAAD,MAAe,CACxClB,gBAAiB,SAACN,GAAD,OAAWwB,EDpFa,CACzClC,KAAMZ,EACNW,QCkFmDW,QAGtCuB,CAAkChC,GC9F3CkC,E,kDACJ,aAAe,IAAD,8BACZ,gBAEK5B,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAK8B,sBAAwB,EAAKA,sBAAsB9B,KAA3B,gBAJjB,E,gDAOV+B,GAAU,IACJC,EAAQD,EAAQE,cAAcF,EAAQG,UAAtCF,IACR,OAAOG,WAAWH,GAAKI,QAAQ,K,mCAGpBL,GAGX,OAFiBA,EAAQE,cAAcF,EAAQG,UAAvC/B,KACyBkC,MAAM,KACZ,K,uCAGZN,GAAU,IACjBC,EAAQD,EAAQE,cAAcF,EAAQG,UAAtCF,IACR,OAAOG,WAAWJ,EAAQ3B,MAAQ4B,GAAKI,QAAQ,K,qCAGhB,IAATrB,EAAQ,EAAlBb,OAAUa,IAEtBuB,EADmCjC,KAAKM,MAAhC2B,wBACeC,OAAOxB,M,+CAGW,IAATA,EAAQ,EAAlBb,OAAUa,IAEhCyB,EADiCnC,KAAKM,MAA9B6B,sBACaD,OAAOxB,M,+BAGpB,IAAD,OACC0B,EAAapC,KAAKM,MAAlB8B,SACR,OACE,oCACIA,EAASC,KAAI,SAACX,GAAD,OACb,wBAAIY,IAAMZ,GACR,4BAAKA,EAAQa,aACb,4BAAKb,EAAQc,KACb,4BAAKd,EAAQe,QACb,4BAAKf,EAAQ3B,OACb,4BAAK,EAAK4B,IAAID,IACd,4BAAK,EAAKgB,aAAahB,IACvB,4BAAK,EAAKiB,iBAAiBjB,IAC3B,oCACA,4BACEhB,GAAKgB,EAAQhB,GACbrB,KAAK,SACL0B,cAAY,aACZK,QAAU,EAAKxB,aAJjB,WAQA,4BACEc,GAAKgB,EAAQhB,GACbrB,KAAK,SACL0B,cAAY,WACZK,QAAU,EAAKK,uBAJjB,mB,GAxDgBJ,aAgFbC,eATS,SAAC/B,GAAD,MAAY,CAClC6C,SAAU7C,EAAMqB,OAAOwB,aAGE,SAACb,GAAD,MAAe,CACxCU,uBAAwB,SAAClC,GAAD,OAAWwB,EF5CM,CACzClC,KAAMN,EACNK,QE0C0DW,KAC1DoC,qBAAsB,SAACpC,GAAD,OAAWwB,EFxCM,CACvClC,KAAML,EACNI,QEsCsDW,QAGzCuB,CAA6CE,GCnFvCoB,E,uKAWjB,OACE,4BAVc,CAAC,kBACf,MACA,yBACA,QACA,QACA,sBACA,mBACA,wBACA,kBAGYP,KAAI,SAACQ,GAAD,OACZ,wBAAIP,IAAMO,GAAUA,W,GAdWxB,aCEpByB,E,uKAEjB,OACE,+BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAL2BzB,a,gCCDd0B,E,uKACT,IACAC,EAAShD,KAAKM,MAAd0C,KACR,OACE,oCACIA,EAAKX,KAAI,SAACG,GAAD,OACT,4BACEF,IAAME,GAEJA,W,GAT2BnB,aCApB4B,E,uKACT,IACAC,EAAelD,KAAKM,MAApB4C,WACR,OACE,oCACIA,EAAWb,KAAI,SAACc,GAAD,OACf,4BACEb,IAAMa,GAEJA,W,GAT0B9B,aCezB+B,EAdS,yDACtB,WAAO7B,GAAP,mBAAA8B,EAAA,+EAE2BC,MALX,+CAGhB,WAEUC,EAFV,QAGkBC,GAHlB,sBAG4B,IAAIC,MAAM,aAHtC,uBAIuBF,EAASG,OAJhC,OAIUC,EAJV,OAKUC,EAASC,OAAOC,KAAKH,GAAMC,QAAO,SAACG,GAAD,MAA6B,SAAdA,KACvDxC,EPWwC,CAC5ClC,KAAMV,EACNS,QOb8BwE,IAN9B,kDAQIrC,EAASpC,EAAM,KAAM6E,UARzB,0DADsB,uDCClBC,E,mLAGFC,EAD0BlE,KAAKM,MAAvB4D,mB,+BAIA,IACAC,EAAenE,KAAKM,MAApB6D,WACR,OACE,oCACIA,EAAW9B,KAAI,SAAC0B,GAAD,OACf,4BACEzB,IAAMyB,GAEJA,W,GAdkB1C,aA6BjBC,eARS,SAAC/B,GAAD,MAAY,CAClC4E,WAAY5E,EAAMqB,OAAOuD,eAGA,SAAC5C,GAAD,MAAe,CACxC2C,cAAe,kBAAM3C,EAAS6B,SAGjB9B,CAA6C2C,GC1BtDG,E,kDACJ,aAAe,IAAD,8BACZ,gBAEK7E,MAAQ,CACXQ,MAAO,IACPwC,YAAa,GACbV,SAAU,MACVY,OAAQ,WACRD,IAAK,oBACLZ,cAAe,IAEjB,EAAKlC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAK0E,wBAA0B,EAAKA,wBAAwB1E,KAA7B,gBAbnB,E,qLAiBJ2E,EAAwBtE,KAAKM,MAA7BgE,oB,SACUhB,MAAM,+C,cAAlBiB,E,gBACsBA,EAAIb,O,OAA1B9B,E,OACN5B,KAAKC,SAAS,CACZ2B,kBAEF0C,EAAoBtE,KAAKT,O,sJAGA,IAAD,EACmCS,KAAKM,MAAxDkE,EADgB,EAChBA,yBAA0BpC,EADV,EACUA,SAAUqC,EADpB,EACoBA,WAC5CD,EAAyBxE,KAAKT,OAC9BiF,EAAyB,2BACpBxE,KAAKT,OADc,IAEtBqC,cAAeQ,EAASqC,GAAY7C,mB,sCAIG,IAAD,IAA3B/B,OAAUC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAC7BC,KAAKC,SAAL,eACGH,EAAOC,M,yCAKV,OACE,4BAAQV,KAAK,SAAS+B,QAAUpB,KAAKJ,aAArC,uB,0CAOF,OACE,4BAAQP,KAAK,SAAS+B,QAAUpB,KAAKqE,yBAArC,oB,+BAOF,IAEQK,EAAY1E,KAAKM,MAAjBoE,QACR,OACE,8BACE,2BAAOC,QAAQ,SAAf,SAEE,2BAAOtF,KAAK,OAAOS,KAAK,QAAQY,GAAG,QAAQM,SAAWhB,KAAKN,gBAG7D,2BAAOiF,QAAQ,aAAf,mBAEE,8BAAU7E,KAAK,cAAcY,GAAG,YAAYM,SAAWhB,KAAKN,gBAG9D,2BAAOiF,QAAQ,SAAf,SAEE,4BAAQjE,GAAG,QAAQM,SAAWhB,KAAKN,aAAeI,KAAK,YACrD,kBAAC,EAAD,QAIJ,2BAAO6E,QAAQ,0BAAf,0BAEE,4BAAQjE,GAAG,yBAAsBM,SAAWhB,KAAKN,aAAeI,KAAK,UACnE,kBAAC,EAAD,CAAYoD,WAzBD,CAAC,WAAY,0BAAqB,8BA6BjD,2BAAOyB,QAAQ,OAAf,OAEE,4BAAQjE,GAAG,MAAMM,SAAWhB,KAAKN,aAAeI,KAAK,OACnD,kBAAC,EAAD,CAAakD,KA/BR,CAAC,oBAAe,QAAS,WAAY,aAAc,gBAkC1D0B,EAAU1E,KAAK4E,oBAAsB5E,KAAK6E,wB,GA9FjCxD,aAgHJC,eAXS,SAAC/B,GAAD,MAAY,CAClCmF,QAASnF,EAAMqB,OAAO8D,QACtBtC,SAAU7C,EAAMqB,OAAOwB,SACvBqC,WAAYlF,EAAMqB,OAAO6D,eAGA,SAAClD,GAAD,MAAe,CACxC+C,oBAAqB,SAACvE,GAAD,OAAWwB,ETpFY,CAC5ClC,KAAMP,EACNM,QSkF0DW,KAC1DyE,yBAA0B,SAACzE,GAAD,OAAWwB,ETtEI,CACzClC,KAAMJ,EACNG,QSoE4DW,QAG/CuB,CAA6C8C,GCpHtDU,E,4KAGF,OADqB9E,KAAKM,MAAlB8B,SACQ2C,QAAO,SAACC,EAAKC,GAAU,IAC7BtD,EAAQsD,EAAKrD,cAAcqD,EAAKpD,UAAhCF,IACR,OAAOqD,EAAMlD,WAAWmD,EAAKlF,MAAQ4B,KACpC,K,+BAIH,OACE,uBAAGZ,cAAY,eACXf,KAAKkF,mB,GAZgB7D,aAsBhBC,eAJS,SAAC/B,GAAD,MAAY,CAClC6C,SAAU7C,EAAMqB,OAAOwB,YAGe,KAAzBd,CAA+BwD,GCrBxCK,E,uKACM,IACAC,EAAqBpF,KAAKM,MAA1B8E,iBACR,OACE,gCACE,uBAAGrE,cAAY,eACXqE,GAEJ,kBAAC,EAAD,MACA,uBAAGrE,cAAY,yBAAf,Y,GATaM,aAqBNC,eAJS,SAAC/B,GAAD,MAAY,CAClC6F,iBAAkB7F,EAAM8F,KAAK7F,SAGS,KAAzB8B,CAA+B6D,GCrBzBG,E,uKAEjB,OACE,oCACE,kBAAC,EAAD,MACA,4CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAP4BC,IAAMlE,W,MCU3BmE,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYrG,IAClC,kBAAC,IAAD,CAAOoG,KAAK,YAAYC,UAAYL,M,MCEtBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BChBAC,EAAgB,CACpBzG,MAAO,GACP0G,SAAU,IAgBGC,GAbM,WAAoC,IAAnC5G,EAAkC,uDAA1B0G,EAAeG,EAAW,uCACtD,OAAQA,EAAO/G,MACf,KAAKb,EAAMC,WACT,OAAO,2BACFc,GADL,IAEEC,MAAO4G,EAAOhH,QAAQI,MACtB0G,SAAUE,EAAOhH,QAAQK,QAE7B,QACE,OAAOF,I,SCbTZ,GAIoBH,EAJpBG,uBACAG,GAGoBN,EAHpBM,aACAC,GAEoBP,EAFpBO,eACAC,GACoBR,EADpBQ,aACAC,GAAoBT,EAApBS,gBAEIgH,GAAgB,CACpB9B,WAAY,GACZ/B,SAAU,GACViE,MAAO,GACP3B,SAAS,EACTD,WAAY,MAwCC6B,GArCO,WAAoC,IAAnC/G,EAAkC,uDAA1B0G,GAAeG,EAAW,uCACvD,OAAQA,EAAO/G,MACf,KAAKV,GACH,OAAO,2BACFY,GADL,IAEE4E,WAAYiC,EAAOhH,UAEvB,KAAKN,GAGH,OAFAsH,EAAOhH,QAAP,aAAmBsB,GAAInB,EAAM6C,SAASlC,QAAWkG,EAAOhH,SACxDG,EAAM6C,SAAN,uBAAqB7C,EAAM6C,UAA3B,CAAqCgE,EAAOhH,UACrC,eAAKG,GACd,KAAKR,GACH,OAAO,2BACFQ,GADL,IAEE6C,SAAU7C,EAAM6C,SAASwB,QAAO,SAAClC,GAAD,OAAaA,EAAQhB,KAAO0F,EAAOhH,aAEvE,KAAKJ,GACH,OAAO,2BACFO,GADL,IAEEmF,SAAS,EACTD,WAAY2B,EAAOhH,UAEvB,KAAKH,GAEH,OADAmH,EAAOhH,QAAP,aAAmBsB,GAAInB,EAAMkF,YAAe2B,EAAOhH,SAC5C,2BACFG,GADL,IAEE6C,SAAU7C,EAAM6C,SAAS2C,QAAO,SAACC,EAAKuB,GACpC,OAAIA,EAAQ7F,KAAOnB,EAAMkF,WAAkB,GAAN,oBAAWO,GAAX,CAAgBoB,EAAOhH,UACtD,GAAN,oBAAW4F,GAAX,CAAgBuB,MACf,IACH7B,SAAS,IAEb,QACE,OAAOnF,IC5CIiH,GAFKC,0BAAgB,CAAEpB,QAAMzE,YCQ7B8F,GAPDC,sBACZC,GACAC,8BACEC,0BAAgBC,OCCpBC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAQA,IAChB,kBAAC,IAAD,CAAeQ,SAAUC,gBACvB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SLoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLwB,QAAQxB,MAAMA,EAAMrC,c","file":"static/js/main.fdd7e65c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wallet.4a994f72.png\";","const types = {\n  LOGIN_INFO: 'LOGIN_INFO',\n  WALLET_INFO: 'WALLET_INFO',\n  GET_WALLET_API_SUCCESS: 'GET_WALLET_API_SUCCESS',\n  GET_WALLET_API_FAILED: 'GET_WALLET_API_FAILED',\n  LOADING_API: 'LOADING_API',\n  GET_EXPENSES: 'GET_EXPENSES',\n  DELETE_EXPENSE: 'DELETE_EXPENSE',\n  EDIT_EXPENSE: 'EDIT_EXPENSE',\n  SET_NEW_EXPENSE: 'SET_NEW_EXPENSE',\n  LOAD_EDITED_EXPENSE: 'LOAD_EDITED_EXPENSE',\n};\n\nexport default types;\n","import types from '../types';\n\nconst {\n  GET_WALLET_API_SUCCESS,\n  GET_WALLET_API_FAILED,\n  GET_EXPENSES,\n  LOGIN_INFO,\n  WALLET_INFO,\n  DELETE_EXPENSE,\n  EDIT_EXPENSE,\n  SET_NEW_EXPENSE } = types;\n\nexport const sendLoginInfo = (payload) => ({\n  type: LOGIN_INFO,\n  payload,\n});\n\nexport const sendWalletInfo = (payload) => ({\n  type: WALLET_INFO,\n  payload,\n});\n\nexport const walletAPISuccess = (payload) => ({\n  type: GET_WALLET_API_SUCCESS,\n  payload,\n});\n\nexport const ERROR = (payload) => ({\n  type: GET_WALLET_API_FAILED,\n  payload,\n});\n\nexport const sendExpensesInfo = (payload) => ({\n  type: GET_EXPENSES,\n  payload,\n});\n\nexport const deleteExpense = (payload) => ({\n  type: DELETE_EXPENSE,\n  payload,\n});\n\nexport const editExpense = (payload) => ({\n  type: EDIT_EXPENSE,\n  payload,\n});\n\nexport const setNewExpense = (payload) => ({\n  type: SET_NEW_EXPENSE,\n  payload,\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport PropTypes from 'prop-types';\nimport { sendLoginInfo } from '../actions';\nimport wallet from '../images/wallet.png';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      senha: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  enableButton() {\n    const { senha } = this.state;\n    const MIN_LENGTH = 6;\n    if (senha.length < MIN_LENGTH) return true;\n    if (!this.emailValidation()) return true;\n    return false;\n  }\n\n  emailValidation() {\n    const { email } = this.state;\n    const emailCheck = /^[a-z0-9.]+@[a-z0-9]+\\.[a-z]+(\\.[a-z]+)?$/i;\n    // Validação de email retirada de:\n    // https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n    return emailCheck.test(email);\n  }\n\n  handleClick() {\n    const { setLoginToStore } = this.props;\n    setLoginToStore(this.state);\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  render() {\n    const { email, senha, redirect } = this.state;\n    if (redirect) return <Redirect to=\"/carteira\" />;\n    return (\n      <div class=\"wrapper fadeInDown\">\n        <div id=\"formContent\">\n\n          <div class=\"fadeIn first\">\n            <img src={ wallet } id=\"icon\" alt=\"User Icon\" />\n          </div>\n\n          <form>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={ email }\n            placeholder=\"e-mail\"\n            data-testid=\"email-input\"\n            onChange={ this.handleChange }\n            className=\"fadeIn second login-input\"\n          />\n          <input\n            type=\"password\"\n            name=\"senha\"\n            value={ senha }\n            placeholder=\"senha\"\n            data-testid=\"password-input\"\n            onChange={ this.handleChange }\n            className=\"fadeIn third login-input\"\n          />\n          <button\n            disabled={ this.enableButton() }\n            type=\"button\"\n            onClick={ this.handleClick }\n            className=\"fadeIn fourth login-button\"\n          >\n            Entrar\n          </button>\n          </form>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setLoginToStore: (value) => dispatch(sendLoginInfo(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  setLoginToStore: PropTypes.func.isRequired,\n};\n\n{/* <div>\n<input\n  type=\"email\"\n  name=\"email\"\n  value={ email }\n  placeholder=\"e-mail\"\n  data-testid=\"email-input\"\n  onChange={ this.handleChange }\n/>\n<input\n  type=\"password\"\n  name=\"senha\"\n  value={ senha }\n  placeholder=\"senha\"\n  data-testid=\"password-input\"\n  onChange={ this.handleChange }\n/>\n<button\n  disabled={ this.enableButton() }\n  type=\"button\"\n  onClick={ this.handleClick }\n>\n  Entrar\n</button>\n</div> */}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteExpense, editExpense } from '../actions';\n\nclass ExpensesTable extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleEditButtonClick = this.handleEditButtonClick.bind(this);\n  }\n\n  ask(expense) {\n    const { ask } = expense.exchangeRates[expense.currency];\n    return parseFloat(ask).toFixed(2);\n  }\n\n  currencyName(expense) {\n    const { name } = expense.exchangeRates[expense.currency];\n    const getOnlyCurrencyName = name.split('/');\n    return getOnlyCurrencyName[0];\n  }\n\n  convertedExpense(expense) {\n    const { ask } = expense.exchangeRates[expense.currency];\n    return parseFloat(expense.value * ask).toFixed(2);\n  }\n\n  handleClick({ target: { id } }) {\n    const { deleteExpenseFromStore } = this.props;\n    deleteExpenseFromStore(Number(id));\n  }\n\n  handleEditButtonClick({ target: { id } }) {\n    const { editExpenseFromStore } = this.props;\n    editExpenseFromStore(Number(id));\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <>\n        { expenses.map((expense) => (\n          <tr key={ expense }>\n            <td>{expense.description}</td>\n            <td>{expense.tag}</td>\n            <td>{expense.method}</td>\n            <td>{expense.value}</td>\n            <td>{this.ask(expense)}</td>\n            <td>{this.currencyName(expense)}</td>\n            <td>{this.convertedExpense(expense)}</td>\n            <td>Real</td>\n            <button\n              id={ expense.id }\n              type=\"button\"\n              data-testid=\"delete-btn\"\n              onClick={ this.handleClick }\n            >\n              Deletar\n            </button>\n            <button\n              id={ expense.id }\n              type=\"button\"\n              data-testid=\"edit-btn\"\n              onClick={ this.handleEditButtonClick }\n            >\n              Editar\n            </button>\n          </tr>\n        )) }\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpenseFromStore: (value) => dispatch(deleteExpense(value)),\n  editExpenseFromStore: (value) => dispatch(editExpense(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesTable);\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.any).isRequired,\n  deleteExpenseFromStore: PropTypes.func.isRequired,\n  editExpenseFromStore: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\n\nexport default class TableHeader extends Component {\n  render() {\n    const headers = ['Descrição',\n      'Tag',\n      'Método de pagamento',\n      'Valor',\n      'Moeda',\n      'Câmbio utilizado',\n      'Valor convertido',\n      'Moeda de conversão',\n      'Editar/Excluir'];\n    return (\n      <tr>\n        { headers.map((header) => (\n          <th key={ header }>{header}</th>\n        )) }\n      </tr>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ExpensesTable from './ExpensesTable';\nimport TableHeader from './TableHeader';\n\nexport default class Table extends Component {\n  render() {\n    return (\n      <table>\n        <TableHeader />\n        <ExpensesTable />\n      </table>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class OptionsTags extends Component {\n  render() {\n    const { tags } = this.props;\n    return (\n      <>\n        { tags.map((tag) => (\n          <option\n            key={ tag }\n          >\n            { tag }\n          </option>\n        )) }\n      </>\n    );\n  }\n}\n\nOptionsTags.propTypes = {\n  tags: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class PayOptions extends Component {\n  render() {\n    const { payMethods } = this.props;\n    return (\n      <>\n        { payMethods.map((payMethod) => (\n          <option\n            key={ payMethod }\n          >\n            { payMethod }\n          </option>\n        )) }\n      </>\n    );\n  }\n}\n\nPayOptions.propTypes = {\n  payMethods: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n","import { ERROR, walletAPISuccess } from '../actions';\n\nconst walletAPI = 'https://economia.awesomeapi.com.br/json/all';\n\nconst fetchCurrencies = () => (\n  async (dispatch) => {\n    try {\n      const response = await fetch(walletAPI);\n      if (!response.ok) throw new Error('xabléu');\n      const data = await response.json();\n      const filter = Object.keys(data).filter((currencie) => currencie !== 'USDT');\n      dispatch(walletAPISuccess(filter));\n    } catch (error) {\n      dispatch(ERROR(error.message));\n    }\n  }\n);\n\nexport default fetchCurrencies;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport fetchCurrencies from '../services/walletAPI';\n\nclass CurrenciesOptions extends Component {\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  render() {\n    const { currencies } = this.props;\n    return (\n      <>\n        { currencies.map((currencie) => (\n          <option\n            key={ currencie }\n          >\n            { currencie }\n          </option>))}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(fetchCurrencies()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrenciesOptions);\n\nCurrenciesOptions.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.any).isRequired,\n  getCurrencies: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport OptionsTags from './OptionsTags';\nimport PayOptions from './PayOptions';\nimport CurrenciesOptions from './CurrenciesOptions';\nimport { sendExpensesInfo, setNewExpense } from '../actions';\n\nclass Form extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '0',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleEditExpenseButton = this.handleEditExpenseButton.bind(this);\n  }\n\n  async handleClick() {\n    const { sendExpensesToStore } = this.props;\n    const api = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const exchangeRates = await api.json();\n    this.setState({\n      exchangeRates,\n    });\n    sendExpensesToStore(this.state);\n  }\n\n  handleEditExpenseButton() {\n    const { sendEditedExpenseToStore, expenses, selectedId } = this.props;\n    sendEditedExpenseToStore(this.state);\n    sendEditedExpenseToStore({\n      ...this.state,\n      exchangeRates: expenses[selectedId].exchangeRates,\n    });\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  addExpenseButton() {\n    return (\n      <button type=\"button\" onClick={ this.handleClick }>\n        Adicionar despesa\n      </button>\n    );\n  }\n\n  editExpenseButton() {\n    return (\n      <button type=\"button\" onClick={ this.handleEditExpenseButton }>\n        Editar despesa\n      </button>\n    );\n  }\n\n  render() {\n    const payMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    const { editing } = this.props;\n    return (\n      <form>\n        <label htmlFor=\"valor\">\n          Valor:\n          <input type=\"text\" name=\"value\" id=\"valor\" onChange={ this.handleChange } />\n        </label>\n\n        <label htmlFor=\"descricao\">\n          Descrição:\n          <textarea name=\"description\" id=\"descricao\" onChange={ this.handleChange } />\n        </label>\n\n        <label htmlFor=\"moeda\">\n          Moeda:\n          <select id=\"moeda\" onChange={ this.handleChange } name=\"currency\">\n            <CurrenciesOptions />\n          </select>\n        </label>\n\n        <label htmlFor=\"método de pagamento\">\n          Método de pagamento:\n          <select id=\"método de pagamento\" onChange={ this.handleChange } name=\"method\">\n            <PayOptions payMethods={ payMethods } />\n          </select>\n        </label>\n\n        <label htmlFor=\"tag\">\n          Tag:\n          <select id=\"tag\" onChange={ this.handleChange } name=\"tag\">\n            <OptionsTags tags={ tags } />\n          </select>\n        </label>\n        { editing ? this.editExpenseButton() : this.addExpenseButton() }\n\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  editing: state.wallet.editing,\n  expenses: state.wallet.expenses,\n  selectedId: state.wallet.selectedId,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendExpensesToStore: (value) => dispatch(sendExpensesInfo(value)),\n  sendEditedExpenseToStore: (value) => dispatch(setNewExpense(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\nForm.propTypes = {\n  sendExpensesToStore: PropTypes.func.isRequired,\n  editing: PropTypes.bool.isRequired,\n  sendEditedExpenseToStore: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectedId: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass SumExpensesValue extends Component {\n  sumExpenses() {\n    const { expenses } = this.props;\n    return expenses.reduce((acc, curr) => {\n      const { ask } = curr.exchangeRates[curr.currency];\n      return acc + parseFloat(curr.value * ask);\n    }, 0);\n  }\n\n  render() {\n    return (\n      <p data-testid=\"total-field\">\n        { this.sumExpenses() }\n      </p>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, null)(SumExpensesValue);\n\nSumExpensesValue.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport SumExpensesValue from './SumExpensesValue';\n\nclass Header extends Component {\n  render() {\n    const { getUserFromStore } = this.props;\n    return (\n      <header>\n        <p data-testid=\"email-field\">\n          { getUserFromStore }\n        </p>\n        <SumExpensesValue />\n        <p data-testid=\"header-currency-field\">\n          BRL\n        </p>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  getUserFromStore: state.user.email,\n});\n\nexport default connect(mapStateToProps, null)(Header);\n\nHeader.propTypes = {\n  getUserFromStore: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport Table from '../components/Table';\nimport Form from '../components/Form';\nimport Header from '../components/Header';\n\nexport default class Wallet extends React.Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <div>TrybeWallet</div>\n        <Form />\n        <Table />\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import types from '../types';\n\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n};\n\nconst loginReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case types.LOGIN_INFO:\n    return {\n      ...state,\n      email: action.payload.email,\n      password: action.payload.senha,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default loginReducer;\n","import types from '../types';\n\nconst {\n  GET_WALLET_API_SUCCESS,\n  GET_EXPENSES,\n  DELETE_EXPENSE,\n  EDIT_EXPENSE,\n  SET_NEW_EXPENSE } = types;\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  error: '',\n  editing: false,\n  selectedId: null,\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_WALLET_API_SUCCESS:\n    return {\n      ...state,\n      currencies: action.payload,\n    };\n  case GET_EXPENSES:\n    action.payload = { id: state.expenses.length, ...action.payload };\n    state.expenses = [...state.expenses, action.payload];\n    return { ...state };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== action.payload),\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      editing: true,\n      selectedId: action.payload,\n    };\n  case SET_NEW_EXPENSE:\n    action.payload = { id: state.selectedId, ...action.payload };\n    return {\n      ...state,\n      expenses: state.expenses.reduce((acc, current) => {\n        if (current.id === state.selectedId) return [...acc, action.payload];\n        return [...acc, current];\n      }, []),\n      editing: false,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}